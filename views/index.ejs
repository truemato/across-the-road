<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>細道</title>
  <script
    src="https://maps.googleapis.com/maps/api/js?key=<%= googleMapsApiKey %>&callback=initMap&v=weekly&libraries=marker"
    async defer></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
      height: 100vh;
      overflow: hidden;
    }

    #threejs-container {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 3;
      pointer-events: none;
    }

    #street-view {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100vh;
      z-index: 1;
    }

    #map {
      position: absolute;
      left: 20px;
      bottom: 20px;
      width: 30%;
      height: 30vh;
      border-radius: 15px;
      background: rgba(255, s255, 255, 0.9);
      z-index: 2;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    #current-log {
      position: absolute;
      top: 50px;
      left: 50%;
      width: 23%;
      transform: translateX(-50%);
      padding: 10px 20px;
      border-radius: 8px;
      background: rgba(255, 255, 255, 0.9);
      z-index: 2;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    #input-log {
      position: absolute;
      right: 20px;
      top: 15%;
      width: 28%;
      max-height: 80vh;
      overflow-y: auto;
      border-radius: 8px;
      padding: 15px;
      background: rgba(200, 200, 200, 0.9);
      z-index: 2;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
  </style>
</head>

<body>
  <div id="street-view"></div>
  <div id="map"></div>
  <div id="current-log">Loading...</div>
  <div id="input-log"></div>
  <div id="threejs-container"></div>

  <script>
    // Three.js 初期化
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ alpha: true });

    const container = document.getElementById('threejs-container');
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0x000000, 0);
    container.appendChild(renderer.domElement);

    const light = new THREE.PointLight(0xffffff, 1);
    light.position.set(10, 10, 10);
    scene.add(light);

    const redMaterial = new THREE.MeshStandardMaterial({ color: 0xff0000 });
    const whiteMaterial = new THREE.MeshStandardMaterial({ color: 0xffffff });
    const group = new THREE.Group();

    for (let i = 0; i < 4; i++) {
      const geometry = new THREE.CylinderGeometry(5, 5, 2, 32, 1, false, i * Math.PI / 2, Math.PI / 2);
      const material = i % 2 === 0 ? redMaterial : whiteMaterial;
      const section = new THREE.Mesh(geometry, material);
      group.add(section);
    }
    group.rotation.z = Math.PI / 2;
    scene.add(group);
    camera.position.z = 40;

    let currentValue = 0;
    let currentLat = 34.9862105;
    let currentLng = 135.7662586;
    let updateCount = 0;
    let totalDistance = 0;
    let map, marker, streetView;

    function animate() {
      requestAnimationFrame(animate);
      group.rotation.x -= currentValue * 0.33; // valueの値に基づいて回転
      renderer.render(scene, camera);
    }
    animate();

    async function initMap() {
      // マップの初期化
      map = new google.maps.Map(document.getElementById("map"), {
        center: { lat: currentLat, lng: currentLng },
        zoom: 15,
        mapId: "d083e2f5874ba61c",  // mapID は mapId に変更される可能性もあるので注意
      });
      // AdvancedMarkerElement の初期化
      marker = new google.maps.marker.AdvancedMarkerElement({
        position: { lat: currentLat, lng: currentLng },
        map: map,
        // 必要に応じて title や content などのプロパティを追加できます
      });
      // StreetView の初期化
      streetView = new google.maps.StreetViewPanorama(
        document.getElementById("street-view"),
        {
          position: { lat: currentLat, lng: currentLng },
          pov: { heading: 0, pitch: 0 },
          zoom: 1,
        }
      );
      map.setStreetView(streetView);
    }

    // データの定期更新
    async function fetchData() {
      try {
        const response = await fetch("/api/sensorvalue");
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        const data = await response.json();

        if (data && data.length > 0) {
          const latestData = data[0];
          // Three.jsの回転速度を更新
          currentValue = latestData.value;

          // 位置情報を更新
          currentLat = latestData.lat;
          currentLng = latestData.lng;
          updateCount = latestData.updateCount;
          totalDistance = latestData.totalDistance;

          const newPosition = { lat: currentLat, lng: currentLng };
          map.setCenter(newPosition);
          marker.position = newPosition;
          streetView.position = newPosition;
          streetView.setPosition(newPosition);

          const { AdvancedMarkerElement, PinElement } = await google.maps.importLibrary("marker");

          // ステータス表示を更新
          document.getElementById("current-log").textContent =
            `走行距離: ${totalDistance.toFixed(0)} m, Update: ${updateCount}` +
            `緯度: ${currentLat.toFixed(2)}, 経度: ${currentLng.toFixed(2)}, `;
        }
      } catch (error) {
        console.error("Error fetching sensor data:", error);
      }
    }

    // 入力履歴の更新
    async function updateInputLog() {
      try {
        const response = await fetch("/api/haikuplace");
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

        const entries = await response.json();
        const inputLog = document.getElementById("input-log");

        inputLog.innerHTML = entries
          .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
          .map(entry => `
            <div class="log-entry" style="margin-bottom: 15px; padding: 10px; background: rgba(255, 255, 255, 0.8); border-radius: 5px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
              <div style="font-size: 0.5em; color: #666; margin-bottom: 5px;">
                ${new Date(entry.timestamp).toLocaleString()}
              </div>
              <div style="margin-bottom: 5px; font-size: 1em;">
                ${entry.comment}
              </div>
              <div style="font-size: 0.5em; color: #888;">
                ${entry.placename || "場所不明"}
              </div>
            </div>
          `).join("");
      } catch (error) {
        console.error("Error updating input log:", error);
      }
    }

    // 定期的なデータ更新
    setInterval(fetchData, 1000);
    setInterval(updateInputLog, 10000);

    // 初期化
    window.onload = () => {
      initMap();
      fetchData();
      updateInputLog();
    };

    // リサイズ対応
    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });
  </script>
</body>

</html>