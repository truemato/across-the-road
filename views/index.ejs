<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>細道</title>
  <script src="https://cdn.socket.io/4.5.1/socket.io.min.js"></script>
  <!-- 環境変数から Google Maps API Key を挿入 -->
  <script
    src="https://maps.googleapis.com/maps/api/js?key=<%= googleMapsApiKey %>&callback=initMap&v=weekly&libraries=marker"
    async defer></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script>
    function convertTategaki(str) {
      const data = str.split('\n').map((line) => line.split(''));
      const maxLength = Math.max(...data.map((arr) => arr.length));
      const res = Array.from(Array(maxLength), (_, i) =>
        data.map((row) => row[i] ?? '　').reverse(),
      );
      return res.map((line) => line.join('')).join('\n');
    }
  </script>

  <style>
    .haiku-vertical {
      writing-mode: vertical-rl;
      text-orientation: upright;
      white-space: pre;
      margin-left: auto;
      margin-right: auto;
    }

    /* スマートフォン向けのスタイル */
    @media screen and (max-width: 768px) {
      .log-entry {
        position: relative;
      }

      .haiku-comment {
        writing-mode: vertical-rl;
        text-orientation: upright;
        white-space: pre;
        margin: 10px auto;
        line-height: 1.5em;
        /* インラインブロック要素として表示 */
      }
    }

    .corner-link {
      position: fixed;
      bottom: 20px;
      right: 20px;
      z-index: 1000;
      background-color: rgba(255, 255, 255, 0.8);
      padding: 10px 16px;
      border-radius: 8px;
      text-decoration: none;

      font-size: 24px;
      font-weight: bold;
      color: #4B5563;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      transition: all 0.2s ease;
      font-family: "Helvetica Neue", Arial, sans-serif;

      outline: none;
      border: none;
    }

    .corner-link:focus,
    .corner-link:active,
    .corner-link:visited {
      outline: none !important;
      border: none !important;
      text-decoration: none !important;
      background-color: rgba(250, 250, 250, 0.9);
    }

    .corner-link:hover {
      outline: none !important;
      border: none !important;
      text-decoration: none !important;
      background-color: rgba(255, 255, 255, 0.95);
      transform: scale(1.05);
      box-shadow:
        0 0 10px rgba(255, 255, 255, 0.8),
        0 0 20px rgba(255, 255, 255, 0.6),
        0 0 30px rgba(255, 255, 255, 0.4),
        0 0 40px rgba(255, 255, 255, 0.2);
      text-shadow:
        0 0 5px rgba(0, 0, 0, 0.2),
        0 0 10px rgba(0, 0, 0, 0.1);
    }

    body {
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
      height: 100vh;
      overflow: hidden;
    }

    #port-selector {
      position: fixed;
      right: 10px;
      bottom: 10px;
      background: white;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.1);
    }

    select,
    button {
      margin-top: 5px;
      width: 100%;
    }

    #status {
      margin-top: 10px;
      font-size: 14px;
    }

    #threejs-container {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 3;
      pointer-events: none;
    }

    #street-view {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100vh;
      z-index: 1;
    }

    #map {
      position: absolute;
      left: 20px;
      bottom: 20px;
      width: 30%;
      height: 30vh;
      border-radius: 15px;
      background: rgba(255, 255, 255, 0.9);
      z-index: 2;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    #current-log {
      font-family: "Helvetica Neue", Arial, sans-serif;
      position: absolute;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      padding: 10px 20px;
      border-radius: 8px;
      background: rgba(255, 255, 255, 0.9);
      z-index: 2;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    #input-log {
      font-family: "Helvetica Neue", Arial, sans-serif;
      position: absolute;
      right: 20px;
      top: 30px;
      width: 20%;
      max-height: 75vh;
      overflow-y: auto;
      border-radius: 5px;
      padding: 10px;
      background: rgba(200, 200, 200, 0.9);
      z-index: 1;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);

    }

    a {
      color: gray;
      text-decoration: none;
      border-bottom: 1px dotted gray;
    }

    a:visited,
    a:hover,
    a:active {
      color: gray;
      border-bottom: 1px dotted gray;
    }
  </style>
</head>

<body>
  <div id="street-view"></div>
  <div id="map"></div>
  <div id="current-log">Loading...</div>
  <div id="sensor-log"
    style="position: absolute; top: 20px; right: 20px; background: white; padding: 10px; border-radius: 8px; box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);">
    Loading...
  </div>
  <div id="input-log"></div>
  <div id="threejs-container"></div>
  <a href="https://zenn.dev/truemato/articles/ee1578e7e6bade" class="corner-link">ステートメント</a>

  <script>
    // Three.js 初期化
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ alpha: true });

    const container = document.getElementById('threejs-container');
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0x000000, 0);
    container.appendChild(renderer.domElement);

    const light = new THREE.PointLight(0xffffff, 1);
    light.position.set(10, 10, 10);
    scene.add(light);

    const redMaterial = new THREE.MeshStandardMaterial({ color: 0xff0000 });
    const whiteMaterial = new THREE.MeshStandardMaterial({ color: 0xffffff });
    const group = new THREE.Group();

    for (let i = 0; i < 4; i++) {
      const geometry = new THREE.CylinderGeometry(5, 5, 2, 32, 1, false, i * Math.PI / 2, Math.PI / 2);
      const material = i % 2 === 0 ? redMaterial : whiteMaterial;
      const section = new THREE.Mesh(geometry, material);
      group.add(section);
    }
    group.rotation.z = Math.PI / 2;

    group.scale.set(1.5, 1.5, 1.5);
    scene.add(group);

    // カメラ位置と向きを調整 (左後ろから見下ろすイメージ)
    camera.position.set(10, 15, 35);
    camera.lookAt(group.position);

    let currentValue = 0;
    let currentLat = 34.9862105;
    let currentLng = 135.7662586;
    let updateCount = 0;
    let totalDistance = 0;
    let map, marker, streetView;

    function animate() {
      requestAnimationFrame(animate);
      group.rotation.x -= currentValue * 5; // valueの値に基づいて回転
      renderer.render(scene, camera);
    }
    animate();
    async function snapToRoads(rawPos) {
      return new Promise((resolve, reject) => {
        const path = [new google.maps.LatLng(rawPos.lat, rawPos.lng)];

        // Create a Roads service object
        const service = new google.maps.RoadsService();

        // Call snapToRoads function
        service.snapToRoads(
          {
            path: path,
            interpolate: true  // Interpolate points along the road if the path isn't exactly on the road
          },
          (response, status) => {
            if (status === google.maps.RoadsStatus.OK && response.length > 0) {
              // If successful, return the snapped position (first point of response)
              const snappedPos = response[0].location;
              resolve({
                lat: snappedPos.lat(),
                lng: snappedPos.lng()
              });
            } else {
              // If there was an error, reject the promise
              reject(`Error snapping to road: ${status}`);
            }
          }
        );
      });
    }

    // 最新の位置情報を取得
    async function initPosition() {
      try {
        const response = await fetch("api/lastplace");
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const latestPlace = await response.json();
        currentLat = latestPlace.lat;
        currentLng = latestPlace.lng;

        // ストリートビューのメタデータを取得
        const apiKey = "<%= googleMapsApiKey %>";  // 有効なGoogle Maps APIキー
        const metadataUrl = `https://maps.googleapis.com/maps/api/streetview/metadata?location=${currentLat},${currentLng}&key=${apiKey}`;

        const metadataResponse = await fetch(metadataUrl);
        const metadata = await metadataResponse.json();

        if (metadata.status === "OK") {
          streetView.setPosition({ lat: currentLat, lng: currentLng });
        } else {
          // 近くのストリートビューを検索
          await findNearestStreetView(currentLat, currentLng);
        }
      } catch (error) {
        console.error("位置情報の取得に失敗しました:", error);
      }
    }

    // 近くのストリートビューを検索する
    async function findNearestStreetView(lat, lng) {
      const svService = new google.maps.StreetViewService();
      const location = new google.maps.LatLng(lat, lng);

      svService.getPanorama({ location, radius: 100 }, (data, status) => {
        if (status === google.maps.StreetViewStatus.OK) {
          streetView.setPosition(data.location.latLng);
        } else {
          console.warn("近くにもストリートビューが見つかりませんでした。");
        }
      });
    }

    // マップとストリートビューの初期化
    function initMap() {
      map = new google.maps.Map(document.getElementById("map"), {
        center: { lat: currentLat, lng: currentLng },
        zoom: 15,
      });

      marker = new google.maps.Marker({
        position: { lat: currentLat, lng: currentLng },
        map: map,
      });

      streetView = new google.maps.StreetViewPanorama(
        document.getElementById("street-view"),
        {
          position: { lat: currentLat, lng: currentLng },
          pov: { heading: 0, pitch: 0 },
          zoom: 1,
        }
      );
      map.setStreetView(streetView);  // マップにストリートビューをセット
    }

    // 定期的に位置情報を取得
    async function fetchData() {
      try {
        const response = await fetch("/api/sensorvalue");
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        const data = await response.json();

        if (data && data.length > 0) {
          const latestData = data[0]; // Assuming the latest data is the first item
          currentLat = latestData.lat;
          currentLng = latestData.lng;
          totalDistance = latestData.totalDistance; // Set the totalDistance from the API response

          const newPosition = { lat: currentLat, lng: currentLng };
          map.setCenter(newPosition);
          marker.setPosition(newPosition);

          // Update the current log with the totalDistance value (converted to meters)
          document.getElementById("current-log").textContent =
            `${(totalDistance / 100).toFixed(2)} m`;
          await initPosition();

        }
      } catch (error) {
        console.error("Error fetching sensor data:", error);
      }
    }


    function getNearestPanorama(location, radius = 100) {
      return new Promise((resolve, reject) => {
        const svService = new google.maps.StreetViewService();
        svService.getPanorama({ location, radius }, (data, status) => {
          if (
            status === google.maps.StreetViewStatus.OK &&
            data &&
            data.location
          ) {
            resolve(data.location.latLng);
          } else {
            reject(
              `No panorama found near ${location.lat}, ${location.lng} (status: ${status})`
            );
          }
        });
      });
    }
    async function updatePegman(rawPos) {
      const snappedPos = await snapToRoads(rawPos);
      try {
        const nearestPanorama = await getNearestPanorama(
          new google.maps.LatLng(snappedPos.lat, snappedPos.lng),
          100
        );
        pegmanPosition = {
          lat: nearestPanorama.lat(),
          lng: nearestPanorama.lng(),
        };
      } catch (err) {
        console.warn("Panorama not found:", err);
        pegmanPosition = { ...snappedPos };
      }
      return pegmanPosition;
    }
    async function ensureStreetView(lat, lng) {
      try {
        const apiKey = "<%= googleMapsApiKey %>"; // 必ず有効なGoogle Maps APIキー
        const url = `https://maps.googleapis.com/maps/api/streetview/metadata?location=${lat},${lng}&key=${apiKey}`;
        const resp = await fetch(url);
        if (!resp.ok) {
          throw new Error("StreetView metadata fetch error: " + resp.status);
        }
        const metadata = await resp.json();
        // status が "OK" なら利用可能
        if (metadata.status === "OK") {
          // StreetViewをその座標にセット
          streetView.setPosition({ lat, lng });
        } else {
          console.warn("StreetView not available (status:", metadata.status, ")");
          // 代わりに別の処理 (フォールバック)：
          // 例: 近くの既知の座標に移動するとか、以前の座標を使う等
        }
      } catch (err) {
        console.error("Error in ensureStreetView:", err);
      }
    }

    // 入力履歴の更新
    async function updateInputLog() {
      try {
        const response = await fetch("/api/haikuplace");
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const entries = await response.json();
        const isMobile = window.innerWidth <= 768;

        const inputLog = document.getElementById("input-log");
        inputLog.innerHTML = entries
          .map((entry) => {
            const displayPlace = entry.placename || "場所不明";
            const linkUrl = `https://www.google.com/maps/search/?api=1&query=${entry.lat},${entry.lng}`;

            // スマートフォンの場合は俳句を縦書きに変換
            const commentText = isMobile ?
              `<div class="haiku-comment">${entry.comment}</div>` :
              `<div>${entry.comment}</div>`;

            return `
          <div class="log-entry" style="margin-bottom: 15px; padding: 10px; background: rgba(255, 255, 255, 0.8); border-radius: 5px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
            <div style="font-size: 0.8em; color: #999; margin-bottom: 5px;">
              ${new Date(entry.timestamp).toLocaleString()}
            </div>
            ${commentText}
            <div style="font-size: 0.8em; color: #999;">
              <a href="${linkUrl}" target="_blank">${displayPlace}</a>
            </div>
          </div>
        `;
          })
          .join("");
      } catch (error) {
        console.error("Error updating input log:", error);
      }
    }

    // ウィンドウサイズが変更されたときにも更新
    window.addEventListener('resize', updateInputLog);
    // 定期的なデータ更新
    setInterval(fetchData, 1000);
    setInterval(updateInputLog, 10000);

    // 初期化
    window.onload = () => {
      initPosition
      initMap();
      fetchData();
      updateInputLog();
    };

    // リサイズ対応
    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });
  </script>
</body>

</html>